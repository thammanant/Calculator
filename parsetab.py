
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN DIV EQ GT GTE INT INT_DIV LPAREN LT LTE MUL NEQ POW REAL RPAREN SUB VARprogram : statement statements\n               | statements : statement statements\n                  | statement : assignment\n                 | expression\n                 | errorassignment : variable ASSIGN expressionexpression : term\n                  | term binary-operator expressionterm : factor\n            | factor POW termfactor : number\n              | variable\n              | LPAREN expression RPARENnumber : INT\n              | REALvariable : VAR\n                | VAR ASSIGN numberbinary-operator : ADD\n                      | SUB\n                      | MUL\n                      | DIV\n                      | INT_DIV\n                      | GTE\n                      | GT\n                      | LTE\n                      | LT\n                      | EQ\n                      | NEQ'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,32,33,34,35,36,37,38,],[-2,0,-4,-5,-6,-7,-14,-9,-18,-13,-11,-16,-17,-4,-1,-14,-3,-8,-10,-19,-12,-15,]),'error':([0,2,3,4,5,6,7,8,9,10,12,13,14,32,34,35,36,37,38,],[5,5,-5,-6,-7,-14,-9,-18,-13,-11,-16,-17,5,-14,-8,-10,-19,-12,-15,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,32,34,35,36,37,38,],[8,8,-5,-6,-7,-14,-9,-18,-13,-11,8,-16,-17,8,8,8,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,8,-14,-8,-10,-19,-12,-15,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,32,34,35,36,37,38,],[11,11,-5,-6,-7,-14,-9,-18,-13,-11,11,-16,-17,11,11,11,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,11,-14,-8,-10,-19,-12,-15,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34,35,36,37,38,],[12,12,-5,-6,-7,-14,-9,-18,-13,-11,12,-16,-17,12,12,12,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,12,12,-14,-8,-10,-19,-12,-15,]),'REAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34,35,36,37,38,],[13,13,-5,-6,-7,-14,-9,-18,-13,-11,13,-16,-17,13,13,13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,13,13,-14,-8,-10,-19,-12,-15,]),'ASSIGN':([6,8,12,13,36,],[16,29,-16,-17,-19,]),'POW':([6,8,9,10,12,13,32,36,38,],[-14,-18,-13,30,-16,-17,-14,-19,-15,]),'ADD':([6,7,8,9,10,12,13,32,36,37,38,],[-14,18,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'SUB':([6,7,8,9,10,12,13,32,36,37,38,],[-14,19,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'MUL':([6,7,8,9,10,12,13,32,36,37,38,],[-14,20,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'DIV':([6,7,8,9,10,12,13,32,36,37,38,],[-14,21,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'INT_DIV':([6,7,8,9,10,12,13,32,36,37,38,],[-14,22,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'GTE':([6,7,8,9,10,12,13,32,36,37,38,],[-14,23,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'GT':([6,7,8,9,10,12,13,32,36,37,38,],[-14,24,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'LTE':([6,7,8,9,10,12,13,32,36,37,38,],[-14,25,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'LT':([6,7,8,9,10,12,13,32,36,37,38,],[-14,26,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'EQ':([6,7,8,9,10,12,13,32,36,37,38,],[-14,27,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'NEQ':([6,7,8,9,10,12,13,32,36,37,38,],[-14,28,-18,-13,-11,-16,-17,-14,-19,-12,-15,]),'RPAREN':([7,8,9,10,12,13,31,32,35,36,37,38,],[-9,-18,-13,-11,-16,-17,38,-14,-10,-19,-12,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,2,14,],[2,14,14,]),'assignment':([0,2,14,],[3,3,3,]),'expression':([0,2,11,14,16,17,],[4,4,31,4,34,35,]),'variable':([0,2,11,14,16,17,30,],[6,6,32,6,32,32,32,]),'term':([0,2,11,14,16,17,30,],[7,7,7,7,7,7,37,]),'number':([0,2,11,14,16,17,29,30,],[9,9,9,9,9,9,36,9,]),'factor':([0,2,11,14,16,17,30,],[10,10,10,10,10,10,10,]),'statements':([2,14,],[15,33,]),'binary-operator':([7,],[17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement statements','program',2,'p_program','processor.py',203),
  ('program -> <empty>','program',0,'p_program','processor.py',204),
  ('statements -> statement statements','statements',2,'p_statements','processor.py',212),
  ('statements -> <empty>','statements',0,'p_statements','processor.py',213),
  ('statement -> assignment','statement',1,'p_statement','processor.py',221),
  ('statement -> expression','statement',1,'p_statement','processor.py',222),
  ('statement -> error','statement',1,'p_statement','processor.py',223),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','processor.py',228),
  ('expression -> term','expression',1,'p_expression','processor.py',233),
  ('expression -> term binary-operator expression','expression',3,'p_expression','processor.py',234),
  ('term -> factor','term',1,'p_term','processor.py',242),
  ('term -> factor POW term','term',3,'p_term','processor.py',243),
  ('factor -> number','factor',1,'p_factor','processor.py',251),
  ('factor -> variable','factor',1,'p_factor','processor.py',252),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','processor.py',253),
  ('number -> INT','number',1,'p_number','processor.py',263),
  ('number -> REAL','number',1,'p_number','processor.py',264),
  ('variable -> VAR','variable',1,'p_variable','processor.py',269),
  ('variable -> VAR ASSIGN number','variable',3,'p_variable','processor.py',270),
  ('binary-operator -> ADD','binary-operator',1,'p_binary_operator','processor.py',286),
  ('binary-operator -> SUB','binary-operator',1,'p_binary_operator','processor.py',287),
  ('binary-operator -> MUL','binary-operator',1,'p_binary_operator','processor.py',288),
  ('binary-operator -> DIV','binary-operator',1,'p_binary_operator','processor.py',289),
  ('binary-operator -> INT_DIV','binary-operator',1,'p_binary_operator','processor.py',290),
  ('binary-operator -> GTE','binary-operator',1,'p_binary_operator','processor.py',291),
  ('binary-operator -> GT','binary-operator',1,'p_binary_operator','processor.py',292),
  ('binary-operator -> LTE','binary-operator',1,'p_binary_operator','processor.py',293),
  ('binary-operator -> LT','binary-operator',1,'p_binary_operator','processor.py',294),
  ('binary-operator -> EQ','binary-operator',1,'p_binary_operator','processor.py',295),
  ('binary-operator -> NEQ','binary-operator',1,'p_binary_operator','processor.py',296),
]
